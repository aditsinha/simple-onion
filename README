simple-onion

Stasiek Świdwiński
Aditya Sinha

Building the program:

Run 'make' from the root directory of the project.

Config file structure:

The config file contains 2 groups of addresses.  Each group consists
contains one or more addresses with one address per line.  The groups
are separated by a blonk line.  The first group contains the addresses
of all of the switches in the network.  The second group contains the
addresses of all of the clients.  There must be at least 2 switches and
at least 2 clients.  All of the nodes running the protocol must have
an identical config file.  We have included a sample config file in
sample_config.

Running the program:

You must be logeed into all of the computers listed in the config
file.  Then, use the following command to start the program on each client node:

java -classpath bcprov-jdk15on.jar:. com/onion/App CLIENT <config file name>

and the following command on each switch node:

java -classpath bcprov-jdk15on.jar:. com/onion/App CLIENT <config file name>

Using the program:

You should see some messages describing which switches and clients
have been found in the config file.  In order to send a message to a
client, we first need to connect to it using the command

connect <endpoint number>

Where the client number refers the number of the endpoint in the
endpoints list in the config file.  Fer example, if we were on
tick.zoo.cs.yale.edu and we wanted to connect to newt.zoo.cs.yale.edu,
we would use the command 'connect 1'.  This performs the entire
handshake protocol.  Once we see the 'Connection Established' message,
we can use the command

send <client number> <message>

to send a command to the client.  For example, entering 'send 1 hi'
from tick would send the message to newt.  When newt receives the
message, it does not know that it is from tick.  In order to reply, we
can use the client number in parentheses.  For example, newt might see
'Anonymous592(592) says: hi'.  It can use 'send 592 <message>' to
respond back to tick.

In order to disconnect, either side can use the command 'disconnect
<client number>', which will send a poison message through the entire
circuit.


For debug information, and to see the messages moving around the
network, every node prints every time it receives and sends a message.

If you have any questions on how to run it, please send an email to 
stanislaw.swidwinski@yale.edu and aditya.sinha@yale.edu


External Resources Used
-----------------------
-----------------------

We use Bouncy Castle's implementations of AES and RSA in order to do
secret key and public key encryption respectively.
